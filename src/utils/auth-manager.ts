import { APIRequestContext, APIResponse } from '@playwright/test';
import { getCurrentEnvironment } from '../config/environment';

/**
 * Klasa do zarzƒÖdzania autoryzacjƒÖ JWT
 * Obs≈Çuguje logowanie, od≈õwie≈ºanie token√≥w i ich przechowywanie
 */
export class AuthManager {
  private context: APIRequestContext;
  private baseURL: string;
  private token: string | null = null;
  private tokenExpiry: Date | null = null;

  constructor(context: APIRequestContext) {
    this.context = context;
    this.baseURL = getCurrentEnvironment().baseUrl;
  }

  /**
   * Loguje u≈ºytkownika i pobiera token JWT
   */
  async login(username?: string, password?: string): Promise<string> {
    const env = getCurrentEnvironment();
    
    // U≈ºyj danych z parametr√≥w lub z konfiguracji ≈õrodowiska
    const loginData = {
      username: username || env.username,
      password: password || env.password,
    };

    if (!loginData.username || !loginData.password) {
      throw new Error('Brak danych logowania! Sprawd≈∫ konfiguracjƒô ≈õrodowiska.');
    }

    if (env.debugMode) {
      console.log(`üîê Attempting login for: ${loginData.username}`);
    }

    try {
      const response: APIResponse = await this.context.post(
        `${this.baseURL}/users/signin`,
        {
          data: loginData,
          headers: {
            'Content-Type': 'application/json',
            Accept: 'application/json',
          },
        }
      );

      if (!response.ok()) {
        const errorText = await response.text();
        throw new Error(
          `Logowanie nieudane! Status: ${response.status()}, B≈ÇƒÖd: ${errorText}`
        );
      }

      const responseData = await response.json();
      
      // R√≥≈ºne API mogƒÖ zwracaƒá token w r√≥≈ºnych polach
      this.token = responseData.token || responseData.access_token || responseData.jwt;
      
      if (!this.token) {
        throw new Error('Nie znaleziono tokena w odpowiedzi API');
      }

      // Ustaw czas wyga≈õniƒôcia tokena (domy≈õlnie 1 godzina)
      this.tokenExpiry = new Date(Date.now() + (responseData.expires_in || 3600) * 1000);

      if (env.debugMode) {
        console.log(`‚úÖ Login successful! Token received.`);
        console.log(`‚è∞ Token expires: ${this.tokenExpiry.toISOString()}`);
      }

      return this.token;
    } catch (error) {
      if (env.debugMode) {
        console.error('‚ùå Login error:', error);
      }
      throw error;
    }
  }

  /**
   * Sprawdza czy token jest nadal wa≈ºny
   */
  isTokenValid(): boolean {
    if (!this.token || !this.tokenExpiry) {
      return false;
    }

    // Sprawd≈∫ czy token nie wygas≈Ç (z 5-minutowym buforem)
    const bufferTime = 5 * 60 * 1000; // 5 minut w milisekundach
    return Date.now() < (this.tokenExpiry.getTime() - bufferTime);
  }

  /**
   * Pobiera aktualny token JWT
   * Automatycznie loguje u≈ºytkownika je≈õli token nie istnieje lub wygas≈Ç
   */
  async getValidToken(): Promise<string> {
    const env = getCurrentEnvironment();

    // Je≈õli mamy token z konfiguracji ≈õrodowiska, u≈ºyj go
    if (env.authToken) {
      if (env.debugMode) {
        console.log('üîë U≈ºywam tokena z konfiguracji ≈õrodowiska');
      }
      return env.authToken;
    }

    // Je≈õli token nie istnieje lub wygas≈Ç, zaloguj siƒô ponownie
    if (!this.isTokenValid()) {
      if (env.debugMode) {
        console.log('üîÑ Token niewa≈ºny lub wygas≈Ç, logujƒô ponownie...');
      }
      await this.login();
    }

    if (!this.token) {
      throw new Error('Nie uda≈Ço siƒô uzyskaƒá wa≈ºnego tokena');
    }

    return this.token;
  }

  /**
   * Wylogowuje u≈ºytkownika i czy≈õci token
   */
  async logout(): Promise<void> {
    const env = getCurrentEnvironment();
    
    if (this.token && env.debugMode) {
      console.log('üö™ Wylogowujƒô u≈ºytkownika...');
    }

    try {
      // Opcjonalnie: wywo≈Çaj endpoint logout na serwerze
      if (this.token) {
        await this.context.post(`${this.baseURL}/users/signout`, {
          headers: {
            Authorization: `Bearer ${this.token}`,
            'Content-Type': 'application/json',
          },
        });
      }
    } catch (error) {
      // Ignoruj b≈Çƒôdy wylogowania - wa≈ºne jest wyczyszczenie lokalnego stanu
      if (env.debugMode) {
        console.warn('‚ö†Ô∏è B≈ÇƒÖd podczas wylogowania:', error);
      }
    } finally {
      // Wyczy≈õƒá lokalny stan
      this.token = null;
      this.tokenExpiry = null;
      
      if (env.debugMode) {
        console.log('‚úÖ U≈ºytkownik wylogowany');
      }
    }
  }

  /**
   * Pobiera nag≈Ç√≥wki autoryzacji
   */
  async getAuthHeaders(): Promise<Record<string, string>> {
    const token = await this.getValidToken();
    return {
      Authorization: `Bearer ${token}`,
    };
  }
}
